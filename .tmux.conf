# To reload ~/.tmux.conf
# Ctrl+b r

# Re-bind the prefix key for tmux
unbind C-b           # disable the key binding C-b
set -g prefix C-a    # enable another key binding for the commands
bind C-a send-prefix # what's that?

# ----------------------------------------------------------------
# https://thoughtbot.com/upcase/videos/tmux-configuration
# ----------------------------------------------------------------
# Reload ~/.tmux.conf using "prefix r"
# Every time tmux starts up, all the configs in the ~/.tmux.conf will be
# loaded and become effective (persistent configs).
# However, the configs won't be active if we simply add the configs in the
# .tmux.conf file w/o sourcing the file from the command prompt. Tmux only
# sources .tmux.conf on start-up.
# To overcome this problem, we bind the source-file command to the key r
# Note that we add a 2nd command using a separator "\;" as follows. Only
# for the first time, we need manually source .tmux.conf to activate this.
unbind r
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# --------------------------------------
# Pane Navigation (method 1)
# --------------------------------------
# The -n option eliminates the need to use prefix key.
# bind-key -n C-h select-pane -L
# bind-key -n C-j select-pane -D
# bind-key -n C-k select-pane -U
# bind-key -n C-l select-pane -R
# --------------------------------------

# --------------------------------------
# Pane (tmux) and buffer (vim) Navigation (method 2)
# --------------------------------------
# vim-tmux-navigator didn't work with minpac so I switched to Vundle (??)

# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
# https://www.bountysource.com/teams/vim-tmux-navigator/issues?tracker_ids=288437

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
	| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
	"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
	"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
# --------------------------------------

# --------------------------------------
# Theme and colors
# --------------------------------------
# Refs:
# cassidy.codes/blog/2019-08-03-tmux-colour-theme/
# github.com/cassidycodes/dotfiles/blob/master/.tmux.conf
# github.com/metral/tmux/blob/master/tmux.conf
# --------------------------------------
# set-option -g makes configs global in all windows and sessions.
# Note that "set-option -g" is identical to "set -g".
# set-option -g default-terminal "screen-256color"
# set-option -g status-keys "emacs"
set -g default-terminal "tmux-256color"

# Status bar settings
set-option -g status-bg '#666666' # background color
set-option -g status-fg '#aaaaaa' # foreground color
set-option -g status-left-length 50
set-option -g status-right " #(date '+%a, %b %d - %I:%M') "

# set -g status-bg cyan     # set the background color for the status bar
# --------------------------------------

# --------------------------------------
# Splitting / Creating Panes
# --------------------------------------
# bind-key - split-window -v  # -c '#{pane_current_path}'
# bind-key \ split-window -h  # -c '#{pane_current_path}' # doesn't bind '\' (is this due to Terminal?? Should iTerm2 solve this??)

# bind-key v split-window -h -c '#{pane_current_path}'
# bind-key h split-window -v -c '#{pane_current_path}'

bind-key | split-window -h -c '#{pane_current_path}'
bind-key _ split-window -v -c '#{pane_current_path}'
# --------------------------------------

# --------------------------------------
# Resize panes (fine adjustment; 1 or 2 cursor cells per bump)
# --------------------------------------
# (ap) Some of these contradict with Mac shortcuts (?!)
# bind -n S-Left resize-pane -L 2   # works
# bind -n S-Right resize-pane -R 2  # works
# bind -n S-Down resize-pane -D 1   # contradict probably with zsh!
# bind -n S-Up resize-pane -U 1     # contradict probably with zsh!

# Resize panes (coarse adjustment; 5 or 10 cursor cells per bump)
# (ap) Some of these contradict with Mac shortcuts (?!)
# bind -n C-Left resize-pane -L 10
# bind -n C-Right resize-pane -R 10
# bind -n C-Down resize-pane -D 5
# bind -n C-Up resize-pane -U 
# --------------------------------------

# --------------------------------------
# Not used(??)
# --------------------------------------
# These are already available in basic Tmux
# bind-key b break-pane -d  # this does exactly this: Ctrl-b !
# bind-key C-j choose-tree  # this does exactly this: Ctrl-b w

# Scrollback / Copy Mode
# (ap) I didn't activate this config (I should at some point).
#      This requires https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
# --------------------------------------
 
# --------------------------------------
# Copy Mode
# --------------------------------------
# Refs:
# shapeshed.com/custom-vim-bindings-in-tmux-2-4/
# techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/
# Issues:
# "copy-pipe-and-cancel" doesn't copy to "global" clipboard(??)
# --------------------------------------
# Use vim keybindings while in copy mode
setw -g mode-keys vi

# Prefix+[, select using 'v' (default Space), yank using 'y' (Enter), paste using Prefix+]
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel
# bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
# --------------------------------------

# --------------------------------------
# 5. Advanced Workflow
# thoughtbot.com/upcase/videos/tmux-advanced-workflow
# (I haven't tried yet)
# --------------------------------------
# Quickly view system & process info in htop
# bind-key h split-window -h "htop" # I already use "h" for horizontal split (??)

# Quickly edit todo list
# bind-key t split-window -h "vim ~/todo.md"

# Quickly edit a file in your wiki
# bind-key w split-window -h -c ~/my-wiki "reattach-to-user-namespace vim +CtrlP"

# This is accomplished with prefix-w
# bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Prompted join-pane
# (join window into a pane)
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
# (swap locations of panes)
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# Breaking out session
# We can create a session w/o leaving the current session.
# Note how this is different from: "prefix-b :new -s session_name"
# The "b" in C-b refers the "breaking" from session.
# bind-key C-b send-keys 'tat && exit' 'C-m'

# Killing a seesion
# By default, killing a session from tmux disconnects from tmux.
# This mapping kills a session and moves to adjacent session.
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# --------------------------------------

# --------------------------------------
# Misc
# --------------------------------------
# Make Vim responsive to esc
set -s escape-time 0

# Change the default numbering of window and pane and pane indices.
set -g base-index 1         # start window from 1 (default was 0)
setw -g pane-base-index 1   # start pane from 1
set -g renumber-windows on  # ensure window index numbers get reordered on delete.

# Tell tmux not rename windows after we set a name 
set-option -g allow-rename off  

# Use same path in a newly created window.
bind c new-window -c "#{pane_current_path}"
# --------------------------------------
